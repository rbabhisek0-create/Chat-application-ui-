import React, { useState, useRef, useEffect } from "react";

// Message Component
function Message({ text, isSender, time }) {
return (
<div
style={{
display: "flex",
justifyContent: isSender ? "flex-end" : "flex-start",
marginBottom: "10px",
animation: "fadeIn 0.4s ease",
}}
>
<div
style={{
background: isSender ? "#0078FF" : "#EAEAEA",
color: isSender ? "#fff" : "#000",
padding: "10px 14px",
borderRadius: "16px",
boxShadow: "0 1px 3px rgba(0,0,0,0.15)",
maxWidth: "70%",
wordWrap: "break-word",
}}
>
<div>{text}</div>
<div
style={{
fontSize: "10px",
textAlign: "right",
opacity: 0.7,
marginTop: "4px",
}}
>
{time}
</div>
</div>
</div>
);
}

// ChatBox Component
function ChatBox({ messages }) {
const messagesEndRef = useRef(null);

useEffect(() => {
messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
}, [messages]);

return (
<div
style={{
height: "360px",
overflowY: "auto",
border: "1px solid #ddd",
padding: "16px",
background: "#fefefe",
borderRadius: "12px",
boxShadow: "0 2px 5px rgba(0,0,0,0.1)",
}}
>
{messages.map((msg, idx) => (
<Message  
key={idx}  
text={msg.text}  
isSender={msg.isSender}  
time={msg.time}  
/>
))}
<div ref={messagesEndRef} />
</div>
);
}

// InputField Component
function InputField({ onSend }) {
const [value, setValue] = useState("");

function handleSend() {
if (value.trim() !== "") {
onSend(value);
setValue("");
}
}

return (
<div style={{ display: "flex", marginTop: "10px" }}>
<input
type="text"
style={{
flex: 1,
padding: "10px",
borderRadius: "10px",
border: "1px solid #ccc",
outline: "none",
fontSize: "14px",
}}
value={value}
onChange={(e) => setValue(e.target.value)}
onKeyDown={(e) => e.key === "Enter" && handleSend()}
placeholder="Type a message..."
/>
<button
onClick={handleSend}
style={{
marginLeft: "10px",
padding: "10px 16px",
borderRadius: "10px",
background: "#0078FF",
color: "#fff",
fontWeight: "bold",
border: "none",
cursor: "pointer",
transition: "0.3s",
}}
onMouseOver={(e) => (e.target.style.background = "#005FCC")}
onMouseOut={(e) => (e.target.style.background = "#0078FF")}
>
Send
</button>
</div>
);
}

// Main ChatApp Component
export default function ChatApp() {
const [messages, setMessages] = useState([
{ text: "Hello!", isSender: false, time: "10:01 AM" },
{ text: "Hi, how are you?", isSender: true, time: "10:02 AM" },
{ text: "I’m good. Thanks!", isSender: false, time: "10:03 AM" },
]);

function getTime() {
const now = new Date();
return now.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
}

function handleSend(newText) {
const userMsg = { text: newText, isSender: true, time: getTime() };
setMessages((prev) => [...prev, userMsg]);

setTimeout(() => {  
  setMessages((prev) => [  
    ...prev,  
    { text: "Got it 👍", isSender: false, time: getTime() },  
  ]);  
}, 1000);

}

return (
<div
style={{
width: "400px",
margin: "60px auto",
fontFamily: "Poppins, sans-serif",
}}
>
<h2
style={{
textAlign: "center",
marginBottom: "14px",
color: "#0078FF",
}}
>
💬 Chat Application
</h2>
<ChatBox messages={messages} />
<InputField onSend={handleSend} />

<style>  
    {`  
      @keyframes fadeIn {  
        from { opacity: 0; transform: translateY(6px); }  
        to { opacity: 1; transform: translateY(0); }  
      }  
    `}  
  </style>  
</div>

);
}
Back end
const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const mongoose = require("mongoose");
const cors = require("cors");

const app = express();
const server = http.createServer(app);

app.use(cors());
app.use(express.json());

// Connect MongoDB
mongoose.connect("mongodb://localhost:27017/chatapp", {
useNewUrlParser: true,
useUnifiedTopology: true,
})
.then(() => console.log("✅ MongoDB connected"))
.catch((err) => console.error("MongoDB connection error:", err));

// Create message schema
const messageSchema = new mongoose.Schema({
text: String,
isSender: Boolean,
time: String,
});

const Message = mongoose.model("Message", messageSchema);

// Socket.io setup
const io = new Server(server, {
cors: {
origin: "http://localhost:3000",
methods: ["GET", "POST"],
},
});

io.on("connection", (socket) => {
console.log("A user connected:", socket.id);

// Send existing messages to new user
Message.find().then((messages) => {
socket.emit("loadMessages", messages);
});

// When user sends a message
socket.on("sendMessage", async (data) => {
const newMsg = new Message(data);
await newMsg.save();
io.emit("receiveMessage", data);
});

socket.on("disconnect", () => {
console.log("User disconnected:", socket.id);
});
});

const PORT = 5000;
server.listen(PORT, () => console.log(✅ Server running on port ${PORT}));

Output image
